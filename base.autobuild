# IMPORTANT: new packages must be added at the top of this file

#################################################################################"
#################################################################################"
## 
## Do not add anything below this line unless you know what you are doing
## New packages MUST be added at the top of the file
##
#################################################################################"
#################################################################################"
only_in_flavor 'master' do
    cmake_package 'base/types' do |pkg|
        if package_enabled?('external/sisl')
            pkg.define 'SISL_PREFIX', package('external/sisl').prefix
        end
        Autobuild.env_add_path 'TYPELIB_RUBY_PLUGIN_PATH', File.join(pkg.prefix, "share", "typelib", "ruby")
    end
end

cmake_package 'base/console_bridge'

in_flavor 'master' do
    cmake_package 'base/cmake' do |pkg|
        Autobuild.env_add_path 'CMAKE_PREFIX_PATH', pkg.prefix
    end
end

in_flavor 'master', 'next' do
end

only_in_flavor 'next','stable' do
    cmake_package 'base/types' do |pkg|
        Autoproj.env_add_path 'CMAKE_PREFIX_PATH', pkg.prefix
        if Autobuild::CMake.respond_to?(:module_path)
            Autobuild::CMake.module_path << File.join(pkg.srcdir, "cmake")
        end
        env_set 'ROCK_CMAKE_MACROS', File.join(pkg.srcdir, "cmake")

        if package_enabled?('external/sisl')
            pkg.define 'SISL_PREFIX', package('external/sisl').prefix
        end
    end

    ruby_package 'base/types_ruby' do |pkg|
        Autobuild.env_add_path 'TYPELIB_RUBY_PLUGIN_PATH', File.join(pkg.srcdir, "lib", "base")
    end
end

in_flavor 'master', 'next', 'stable' do
    import_package 'base/templates/ruby_lib'
    ruby_package 'base/admin_scripts'
    remove_from_default 'base/admin_scripts'

    import_package 'base/doc'
    remove_from_default 'base/doc'

    cmake_package 'base/numeric'

    ruby_package 'base/scripts' do |pkg|
        Autobuild.env_add_path 'ROBY_PLUGIN_PATH', File.join(pkg.srcdir, 'lib', 'rock', 'roby_plugin.rb')
    end

    import_package 'base/templates/cmake_lib' do |pkg|
        env_set "ROCK_TEMPLATE_PREFIX", File.join(File.expand_path('..', pkg.srcdir), '')
        env_set "ROCK_TEMPLATE_SUFFIX", ""
    end

    import_package 'base/templates/cmake_vizkit_widget'
    import_package 'base/templates/vizkit'
    import_package 'base/templates/bundle'
    import_package 'base/templates/doc'

    cmake_package 'eigen3' do |pkg|
        pkg.define "EIGEN_BUILD_PKGCONFIG", "ON"
        env_add 'PKG_CONFIG_PATH', File.join(pkg.prefix, 'share', 'pkgconfig')
    end
    # eigen3 is without prefix, to make transition easier once its 
    # a system package. Should go into external dir, though.
    move_package 'eigen3', 'external'
    remove_from_default 'eigen3'

    # Setup bundle support only if base/scripts is enabled 
    if package_enabled?('base/scripts')
        setup_package 'base/scripts' do |pkg|
            bundle_envsh = File.join(Autoproj.root_dir, '.bundle_env.sh')
            if !File.file?(bundle_envsh)
                File.open(bundle_envsh, "w") do |io|
                    io.puts "# File generated by the bundle-default command"
                    io.puts "# Do not change ! Your changes would be overriden !"
                    io.puts "unset ROCK_BUNDLE"
                end
            end
            Autoproj.env_source_file bundle_envsh

            if Autoproj.shell_helpers? && shell = ENV['SHELL']
                shell_kind = File.basename(shell)
                if shell_kind =~ /^\w+$/
                    shell_file = File.join(pkg.srcdir, "shell", shell_kind)

                    if File.file?(shell_file)
                        Autoproj.env_source_file shell_file
                    else
                        # Wait for having imported the package before we add the
                        # file
                        pkg.post_import do
                            if File.exists?(shell_file)
                                Autoproj.env_source_file shell_file
                            end
                        end
                    end
                end
            end
        end
    end

    cmake_package 'external/sisl' do |pkg|
        pkg.define "BUILD_SHARED_LIBS","ON"
        pkg.doc_task do
            pkg.message "copying HTML documentation from %s"
        end # Nothing to do, SISL ships with the generated documentation
        pkg.doc_dir = File.join(pkg.srcdir, 'doc', 'html')
    end
end

Autoproj.env_inherit 'CMAKE_PREFIX_PATH'


def update_archive(pkg, new_url, new_version)
    update_message = ["should we delete #{pkg.srcdir} to update #{pkg.name} to #{new_version} ?",
            "a new tarball for #{pkg.name} is now selected, and I therefore need to delete the",
            "current directory to update. If you say no, the build will continue but I will ask",
            "you again next time."]
    do_update = false

    if File.directory?(pkg.srcdir) && yield
        opt = Autoproj::BuildOption.new("", "boolean", {:default => false, :doc => update_message}, nil)
        auto_update = Autoproj.has_config_key?("AUTOBUILD_ARCHIVE_AUTOUPDATE") && Autoproj.user_config("AUTOBUILD_ARCHIVE_AUTOUPDATE")
        if auto_update || opt.ask('no')
            do_update = true
            pkg.progress_start "deleting #{pkg.srcdir}: a new archive version is available", :done_message => "deleted #{pkg.srcdir}: a new archive version is available" do
                FileUtils.rm_rf pkg.srcdir
            end
        end
    else
        do_update = true
    end

    if do_update
        pkg.importer = Autobuild::ArchiveImporter.new(new_url, :update_cached_file => false)
    end
end

